;; (use-modules (synnax))
(use-service-modules networking ssh web cuirass)
(use-package-modules bootloaders ssh version-control certs)

;; NOTE: If using SSH-protected channels, MUST have nss-certs in globally
;; available packages!
(define %cuirass-specification
  #~(list (specification
           (name "test-guix-hello-timer")
           (build 'hello)
           (period (* 5 60)))
          (specification
           (name "personal")
           (channels (list (channel
                            (name 'synnax)
                            (url "https://github.com/KarlJoad/synnax.git"))
                           (channel (inherit %default-guix-channel))))
           (build '(channels synnax))
           (period 0))
          (specification
           (name "nonguix")
           (channels (list
                      (channel
                       (name 'nonguix)
                       (url "https://gitlab.com/nonguix/nonguix"))
                      (channel (inherit %default-guix-channel))))
           (build '(channels nonguix)))
    ))

(define %system
  (operating-system
   (host-name "Karl-CI")
   (timezone "America/Chicago")
   (bootloader
    (bootloader-configuration
     (bootloader grub-efi-bootloader)
     (targets (list "/boot/efi"))
     (keyboard-layout (keyboard-layout "us"))
     (terminal-outputs '(console))))
   (swap-devices
    (list (swap-space
           (target
            (uuid "fcb0090e-f025-4431-bc48-95fc92fd0e0d")))))
   (file-systems
    (cons* (file-system
            (mount-point "/boot/efi")
            (device (uuid "8289-0DD4" 'fat32))
            (type "vfat"))
           (file-system
            (mount-point "/")
            (device
             (uuid "558530e1-43b5-42ac-8b02-ca76640882b2"
                   'ext4))
            (type "ext4"))
           %base-file-systems))
   (packages
    (append (list git
      nss-certs)
            %base-packages))
   (services
    (append (list (service dhcp-client-service-type)
                  (service openssh-service-type
                           (openssh-configuration
                            (openssh openssh-sans-x)
                            (password-authentication? #false)
                            (permit-root-login #t)
          (log-level 'debug)
                            (authorized-keys
                             ;; Authorise our SSH key.
                             ;; SSH access must be able to access/elevate to user in config list at bottom
                             `(("root" ,(local-file "./ci_rsa.pub"))))))
                  (service cuirass-service-type
                           (cuirass-configuration
                            (specifications %cuirass-specification)
          (interval (* 5 60))
                            (host "0.0.0.0"))))
      (modify-services %base-services
           (guix-service-type config =>
                                                (guix-configuration
                                                 (inherit config)
             ;; (extra-options (list "--max-jobs" 4
             ;;           "--cores" 4))
                                                 (authorized-keys
              ;; Guix signing key generated by Guix in /etc/guix/
              (append (list (local-file "./guix-coordinator.pub"))
                %default-authorized-guix-keys)))))))))

(list (machine
       (operating-system %system)
       (environment managed-host-environment-type)
       (configuration (machine-ssh-configuration
           ;; IP or DNS-resolved address of machine(s) to manage
           (host-name "192.168.20.230")
           (system "x86_64-linux")
           ;; SSH host key of system being configured
           (host-key "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB3+MiMtUqZslF+tBpjipGi7U9b1TSwfhEg6FkmQnrV6 root@(none)")
           (user "root")))))
